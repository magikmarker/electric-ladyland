{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/markjensen/shared/electric-ladyland/app/root.tsx", "/Users/markjensen/shared/electric-ladyland/app/routes/multi-item-form.tsx", "../app/forms/multi-item-form.ts", "../app/services/electric-ladyland/action-utils.ts", "../app/services/electric-ladyland/shared.ts", "../app/services/electric-ladyland/session.server.ts", "../app/services/electric-ladyland/action-function.ts", "../app/services/electric-ladyland/components/hidden.tsx", "../app/services/electric-ladyland/components/shared/display.tsx", "../app/services/electric-ladyland/components/shared/logic.tsx", "../app/services/electric-ladyland/components/text-input.tsx", "../app/services/electric-ladyland/components/radio.tsx", "../app/services/electric-ladyland/components/checkbox-group.tsx", "../app/services/electric-ladyland/components/expandable-list.tsx", "../app/services/electric-ladyland/components/stateful-radio.tsx", "../app/services/electric-ladyland/form-field.tsx", "../app/services/electric-ladyland/form-types.tsx", "../app/services/electric-ladyland/loader/index.ts", "../app/services/electric-ladyland/loader/logic/check-for-relevant-context.ts", "../app/services/electric-ladyland/loader/logic/seed-context-with-initial-values.ts", "../app/services/electric-ladyland/loader/logic/get-form-stage.ts", "/Users/markjensen/shared/electric-ladyland/app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body\n        style={{\n          fontFamily: `'-apple-system', 'Segoe UI', 'Helvetica Neue',\n    'Helvetica', 'Roboto', 'Arial', 'sans-serif', 'system-ui', 'Apple Color Emoji',\n    'Segoe UI Emoji'`,\n          lineHeight: \"1.4\",\n        }}\n      >\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n  LinksFunction,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { multiItemStepForm } from \"~/forms/multi-item-form\";\nimport { formActionFunction } from \"~/services/electric-ladyland/action-function\";\nimport { FormField } from \"~/services/electric-ladyland/form-field\";\nimport { MultipartForm } from \"~/services/electric-ladyland/form-types\";\nimport { formLoaderFunction } from \"~/services/electric-ladyland/loader\";\n\nconst metaTitle = \"Multi-Item Form\";\nconst metaDescription = \"TODO - Fill in description\";\n\nexport let meta: MetaFunction = () => {\n  return {\n    title: metaTitle,\n    description: metaDescription,\n  };\n};\n\nexport let links: LinksFunction = () => {\n  return [\n    {\n      rel: \"stylesheet\",\n      href: FormField.styles,\n    },\n  ];\n};\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  const { currentStepBlueprint, context, commitSession, session } =\n    await formLoaderFunction({\n      basicOrMultipart: \"multipart\",\n      request,\n      formBlueprint: multiItemStepForm,\n    });\n\n  console.log({ currentStepBlueprint, multiItemStepForm, context });\n\n  return json(\n    {\n      currentStepBlueprint,\n      context,\n    },\n    {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    }\n  );\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  return formActionFunction({\n    formBlueprint: multiItemStepForm,\n    formType: \"multipart\",\n    request: request,\n    handleDataFn: () => {\n      console.log(\"lol, handle data\");\n    },\n    successRedirectPath: \"/\",\n  });\n};\n\nexport default function MultiItemForm() {\n  let data = useLoaderData();\n\n  let context = data?.context;\n  let currentStepBlueprint = data?.currentStepBlueprint;\n\n  return (\n    <>\n      <div className=\"content-wrapper form-content-wrapper\">\n        <MultipartForm context={context} formStructure={currentStepBlueprint} />\n      </div>\n    </>\n  );\n}\n", "import type { MultiStepForm, Step } from \"~/services/electric-ladyland/types\";\nimport { validation } from \"~/services/electric-ladyland/validation\";\n\nconst notImportantStep: Step = {\n  fields: [\n    {\n      name: \"not-important\",\n      label: \"Text Input\",\n      type: \"text\",\n      description: \"Short (less than 30 characters) description of todo item\",\n      required: true,\n      initialValue: \"Anything here\",\n      validation: {\n        formInputPattern: \"^[\\\\w\\\\s\\\\-\\\\.&']{2,50}$\",\n        formInputMessage: \"letters, spaces, & or '\",\n        patterns: [\"^[\\\\w\\\\s\\\\-\\\\.&']{2,50}$\"],\n        messages: [\"letters, spaces, & or '\"],\n      },\n    },\n    {\n      name: \"checkbox-test-group\",\n      type: \"checkbox-group\",\n      label: \"Test Checkbox Group\",\n      checkboxes: [\n        {\n          type: \"checkbox\",\n          name: \"checkbox-one\",\n          label: \"Option One\",\n          value: \"option-one\",\n        },\n        {\n          type: \"checkbox\",\n          name: \"checkbox-two\",\n          label: \"Option Two\",\n          value: \"option-two\",\n        },\n        {\n          type: \"checkbox\",\n          name: \"checkbox-three\",\n          label: \"Option Three\",\n          value: \"option-three\",\n        },\n      ],\n    },\n    {\n      name: \"is-commercial-client\",\n      label: \"Commercial Client?\",\n      type: \"stateful-radio\",\n      options: [\"no\", \"yes\", \"maybe\"],\n      initialValue: \"no\",\n      dependentChildren: [\n        [undefined],\n        [\n          {\n            name: \"business-name\",\n            label: \"Business Name\",\n            type: \"text\",\n            required: true,\n            initialValue: \"\",\n            validation: {\n              patterns: [\"^[\\\\w\\\\s&']{2,50}$\"],\n              messages: [\"letters, spaces, & or '\"],\n            },\n          },\n          {\n            name: \"business-address\",\n            label: \"Business Address\",\n            type: \"text\",\n            required: true,\n            initialValue: \"\",\n            validation: {\n              patterns: [\"^[\\\\w\\\\s&']{2,50}$\"],\n              messages: [\"letters, spaces, & or '\"],\n            },\n          },\n        ],\n        [\n          {\n            name: \"business-name\",\n            label: \"Business Name\",\n            type: \"text\",\n            required: true,\n            initialValue: \"\",\n            validation: {\n              patterns: [\"^[\\\\w\\\\s&']{2,50}$\"],\n              messages: [\"letters, spaces, & or '\"],\n            },\n          },\n          {\n            name: \"business-address\",\n            label: \"Business Address\",\n            type: \"text\",\n            required: true,\n            initialValue: \"\",\n            validation: {\n              patterns: [\"^[\\\\w\\\\s&']{2,50}$\"],\n              messages: [\"letters, spaces, & or '\"],\n            },\n          },\n        ],\n      ],\n    },\n    {\n      name: \"testy-test\",\n      type: \"hidden\",\n      initialValue: \"dags\",\n    },\n  ],\n  nextButtonText: \"Todo List\",\n};\n\nconst todoStep: Step = {\n  fields: [\n    {\n      name: \"todo-items-list\",\n      type: \"expandable-list\",\n      listLabel: \"Todo Items\",\n      addItemLabel: \"Add Item\",\n      editItemLabel: \"Edit Item\",\n      addOrEditItemModalLabel: \"Add or Edit Item\",\n      initialValue: [],\n      listItemStructure: [\n        {\n          name: \"todo-title\",\n          label: \"Part #\",\n          type: \"text\",\n          required: true,\n          initialValue: \"\",\n          validation: {\n            patterns: [\"^[\\\\w\\\\s-&']{2,50}$\"],\n            messages: [\"letters, spaces, & or '\"],\n          },\n          showOnMobileTable: true,\n          tableFlex: 3,\n          alignText: \"left\",\n        },\n        {\n          name: \"todo-description\",\n          label: \"Description\",\n          description:\n            \"Short (less than 30 characters) description of todo item\",\n          type: \"text\",\n          required: true,\n          initialValue: \"\",\n          validation: {\n            patterns: [\"^[\\\\w\\\\s-&']{2,30}$\"],\n            messages: [\"letters, spaces, & or '\"],\n          },\n          showOnMobileTable: true,\n          tableFlex: 3,\n          alignText: \"left\",\n        },\n        {\n          name: \"priority\",\n          label: \"Source\",\n          type: \"radio\",\n          options: [\"High\", \"Medium\", \"Low\"],\n          initialValue: \"High\",\n        },\n      ],\n    },\n  ],\n  backButtonText: \"Not Important\",\n  nextButtonText: \"Less Important\",\n};\n\nconst lessImportantStep: Step = {\n  fields: [\n    {\n      name: \"less-important\",\n      label: \"Less Important\",\n      type: \"text\",\n      required: true,\n      initialValue: \"Less important thing\",\n      validation: {\n        patterns: [\"^[\\\\w\\\\s-&']{2,50}$\"],\n        messages: [\"letters, spaces, & or '\"],\n      },\n    },\n  ],\n  backButtonText: \"Todo List\",\n  nextButtonText: \"Submit\",\n};\n\nexport const multiItemStepForm: MultiStepForm = [\n  notImportantStep,\n  todoStep,\n  lessImportantStep,\n];\n", "import { redirect, json } from \"@remix-run/node\";\nimport { convertSingleQuotes } from \"~/services/electric-ladyland/shared\";\nimport { commitSession } from \"~/services/electric-ladyland/session.server\";\nimport type { FormFieldInput, MultiStepForm } from \"./types\";\n\n// A bot entered a value into a hidden field\nfunction honeypotFieldHasValue({ body }: { body: FormData }) {\n  let honeypotField = body.get(\"given-name\");\n\n  // console.log({ honeypotField });\n\n  if (honeypotField) {\n    return true;\n  }\n\n  return false;\n}\n\n// Take the form values from the request\n// form data and add them to context\nfunction addFormValuesToContext({\n  formType,\n  formBlueprint,\n  body,\n  context,\n}:\n  | {\n      formType: \"multipart\";\n      context: any;\n      formBlueprint: MultiStepForm;\n      body: FormData;\n    }\n  | {\n      formType: \"basic\";\n      context: any;\n      formBlueprint: FormFieldInput[];\n      body: FormData;\n    }): any {\n  // Get the inputs from the form\n  function addFieldToContext(field: FormFieldInput) {\n    // Get the form field value\n    let formFieldValue: string | undefined;\n\n    if (\n      field.type === \"email\" ||\n      field.type === \"password\" ||\n      field.type === \"text\" ||\n      field.type === \"textarea\" ||\n      field.type === \"radio\" ||\n      field.type === \"hidden\" ||\n      field.type === \"stateful-radio\"\n    ) {\n      formFieldValue =\n        body.get(`${field.name}`)?.toString() ?? field.initialValue;\n    }\n\n    if (field.type === \"checkbox\") {\n      let checkboxValue = body.get(`${field.name}`)?.toString();\n      // If there is no value, the checkbox was never checked, so\n      // we want to return early\n      // console.log({ checkboxValue });\n\n      if (!checkboxValue) {\n        return;\n      }\n      formFieldValue = checkboxValue;\n    }\n\n    let errors: string[] = [];\n    // If a field is required and not present, we need to add an error\n    // to the field\n    if (\n      field.type === \"text\" ||\n      field.type === \"textarea\" ||\n      field.type === \"email\" ||\n      field.type === \"password\"\n    ) {\n      if (!formFieldValue && field.required) {\n        errors.push(\"This field is required\");\n      }\n    }\n\n    if (typeof field === \"object\") {\n      // console.log({ formFieldValue, fieldName: field.name });\n\n      // Add the field to context\n      if (formFieldValue) {\n        context[`${field.name}`] = {\n          value: formFieldValue,\n          errors,\n        };\n      }\n    }\n\n    // If it is a stateful radio field, check for\n    // dependent children\n    if (field.type === \"stateful-radio\") {\n      // Get the index of the selected value\n      // We need this to know which children to show\n\n      field.dependentChildren.forEach((fields) => {\n        if (typeof fields !== \"undefined\") {\n          fields.forEach((nestedField) => {\n            if (nestedField) {\n              addFieldToContext(nestedField);\n            }\n          });\n        }\n      });\n    }\n\n    if (field.type === \"checkbox-group\") {\n      field.checkboxes.forEach((checkbox) => {\n        // Get rid of checkbox values that might\n        // exist from a previous pass\n        delete context[`${checkbox.name}`];\n        // console.log({ contextAfterDelete: context });\n\n        addFieldToContext(checkbox);\n        console.log(\"hi neighbors\");\n      });\n    }\n  }\n\n  // Use the form structure to create a context object\n  if (formType === \"basic\") {\n    formBlueprint.forEach((field) => {\n      addFieldToContext(field);\n    });\n  }\n\n  if (formType === \"multipart\") {\n    // Get the current form step to know what to add to context\n    const currentFormStep = context.currentStep;\n\n    // console.log({ currentFormStep, formBlueprint, context });\n\n    // console.log(\"lol: \", typeof formBlueprint[currentFormStep]);\n\n    // @ts-ignore\n    for (const field of formBlueprint[currentFormStep]?.fields) {\n      if (field) {\n        addFieldToContext(field);\n      }\n    }\n  }\n\n  // console.log({ context });\n}\n\nfunction validateFieldValue({\n  value,\n  regex,\n}: {\n  value: string;\n  regex: string;\n}) {\n  let regexTestPattern = new RegExp(`${regex}`, \"igm\");\n\n  value = convertSingleQuotes(value);\n\n  // console.log({ regexTestPattern });\n\n  // console.log(\"regexTest: \", regexTestPattern.test(value));\n\n  // console.log({ value });\n\n  return regexTestPattern.test(value);\n}\n\n// Validate a form field value (context)\n// using the validation patterns outlined in formField\n// If an error exists, add it to the context\n// errors array\nfunction validateFormFieldValue({\n  formField,\n  context,\n}: {\n  context: any;\n  formField: FormFieldInput;\n}) {\n  // currentStep and formStage are context properties\n  // that we don't want to validate, they are also not\n  // objects\n\n  // if (typeof formField !== \"object\") {\n  //   console.log(\"I'm out..\");\n\n  //   return;\n  // }\n  if (formField.type === \"hidden\") {\n    return;\n  }\n\n  if (\n    formField.type === \"text\" ||\n    formField.type === \"textarea\" ||\n    formField.type === \"email\" ||\n    formField.type === \"password\"\n  ) {\n    let currentFieldValue = context[`${formField.name}`].value;\n    // Iterate through the validation patterns\n    formField.validation.patterns.forEach((pattern, index) => {\n      const valueIsValid = validateFieldValue({\n        value: currentFieldValue,\n        regex: pattern,\n      });\n\n      // console.log(\"valueIsValid: \", valueIsValid);\n\n      // Value is not valid\n      // Push current error message onto array if it isn't already there\n      if (\n        !valueIsValid &&\n        !context[`${formField.name}`].errors.includes(\n          formField.validation.messages[index]\n        )\n      ) {\n        // console.log(\"add an error\");\n\n        context[`${formField.name}`].errors.push(\n          formField.validation.messages[index]\n        );\n      }\n    });\n  }\n\n  if (formField.type === \"stateful-radio\") {\n    let currentFieldValue = context[`${formField.name}`].value;\n    let { dependentChildren } = formField;\n    // Get currently selected radio option\n    // Get the index of the current value\n    const selectedValueIndex: number =\n      formField.options.indexOf(currentFieldValue);\n\n    if (typeof dependentChildren === \"object\") {\n      dependentChildren[selectedValueIndex].forEach((dependentField) => {\n        if (typeof dependentField !== \"undefined\") {\n          validateFormFieldValue({ context, formField: dependentField });\n        }\n      });\n    }\n  }\n}\n\n// Check for errors in context\n// In basic, we want to check all of the context entries\n// In multipart, we only want to check the context items\n// for the current step\nfunction checkContextForErrors({\n  context,\n  formType,\n  formBlueprint,\n}:\n  | {\n      formBlueprint: FormFieldInput[];\n      formType: \"basic\";\n      context: any;\n    }\n  | {\n      formBlueprint: MultiStepForm;\n      formType: \"multipart\";\n      context: any;\n    }): boolean {\n  let errorsPresent = false;\n  // Basic form\n  if (formType === \"basic\") {\n    for (const fieldValue in context) {\n      // @ts-ignore\n      if (fieldValue?.errors?.length >= 1) {\n        errorsPresent = true;\n      }\n\n      if (errorsPresent) {\n        return true;\n      }\n    }\n  }\n\n  if (formType === \"multipart\") {\n    const currentFormStep = context.currentStep;\n\n    // Using the current form step, get the context fields to\n    // check for errors\n    // eslint-disable-next-line no-inner-declarations\n    function addFieldNameToValidateToArray(\n      field: FormFieldInput,\n      fieldsToValidate: string[]\n    ) {\n      fieldsToValidate.push(field.name);\n\n      if (field.type === \"stateful-radio\") {\n        let selectedIndex = field.options.indexOf(\n          context[`${field.name}`].value\n        );\n        field.dependentChildren[selectedIndex].forEach((nestedField) => {\n          if (nestedField) {\n            fieldsToValidate.push(nestedField.name);\n          }\n        });\n      }\n    }\n    // We only care about the context values in the current step\n    let fieldsToValidate: string[] = [];\n\n    // @ts-ignore\n    for (const field of formBlueprint[currentFormStep]?.fields) {\n      // console.log({ field });\n\n      if (context) addFieldNameToValidateToArray(field, fieldsToValidate);\n    }\n\n    // console.log({ fieldsToValidate });\n\n    for (const fieldToValidate of fieldsToValidate) {\n      if (context[`${fieldToValidate}`]?.errors?.length >= 1) {\n        errorsPresent = true;\n      }\n\n      if (errorsPresent) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Takes in the data (context), success redirect path, and\n// session and commitSession function\nasync function handleFormData({\n  handleDataFn,\n  context,\n  successRedirectPath,\n  session,\n  commitSession,\n  request,\n}: {\n  handleDataFn: any;\n  context: any;\n  successRedirectPath: string;\n  session: any;\n  commitSession: any;\n  request: Request;\n}) {\n  // handle data - the data function should return a tuple\n  // the first item in the tuple will be a boolean to indicate\n  // whether the operation succeeded or failed\n\n  // The second item in the tuple is the success or error message\n  let handleDataResult: [boolean, string] = await handleDataFn(\n    context,\n    request\n  );\n  let [success, message] = handleDataResult;\n\n  if (success) {\n    context.dataHandlerSuccessMessage = message;\n    context.dataHandlerErrorMessage = \"\";\n    session.set(\"context\", context);\n\n    return redirect(successRedirectPath, {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  } else {\n    context.dataHandlerSuccessMessage = \"\";\n    context.dataHandlerErrorMessage = message;\n    session.set(\"context\", context);\n\n    return json(\n      {},\n      {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      }\n    );\n  }\n}\n\nasync function handleListItemFormStructureOp({\n  operationType,\n  formBlueprint,\n  context,\n  session,\n  pathname,\n  body,\n}: {\n  operationType: any;\n  formBlueprint: any;\n  context: any;\n  session: any;\n  pathname: string;\n  body: any;\n}): Promise<any> {\n  let expandableList = formBlueprint[context?.currentStep]?.fields.find(\n    (item: any) => {\n      return item.type === \"expandable-list\";\n    }\n  );\n  let expandableListArr = context?.[expandableList.name]?.value ?? [];\n\n  if (operationType === \"add-item-to-list\") {\n    let listItemObject: any = {};\n\n    expandableList.listItemStructure.forEach((field: any) => {\n      listItemObject[field.name] = {\n        value: body.get(field.name),\n        errors: [],\n      };\n    });\n\n    expandableListArr.push(listItemObject);\n  } else if (operationType === \"edit-list-item\") {\n    let indexToChange = body.get(\"index-to-change\");\n    expandableList.listItemStructure.forEach((field: any) => {\n      expandableListArr[Number(indexToChange)][field.name] = {\n        value: body.get(field.name),\n        errors: [],\n      };\n    });\n  } else if (operationType === \"delete-list-item\") {\n    let indexToDelete = body.get(\"index-to-delete\");\n\n    expandableListArr.splice(Number(indexToDelete), 1);\n  }\n  session.set(\"context\", {\n    ...context,\n    [expandableList.name]: {\n      value: expandableListArr,\n      errors: [],\n    },\n  });\n\n  return redirect(pathname, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n\nexport {\n  honeypotFieldHasValue,\n  addFormValuesToContext,\n  validateFormFieldValue,\n  validateFieldValue,\n  checkContextForErrors,\n  handleFormData,\n  handleListItemFormStructureOp,\n};\n", "import { MultiStepForm } from \"~/services/electric-ladyland/types\";\n\nexport function getFormStage({\n  context,\n  formBlueprint,\n}: {\n  context: any;\n  formBlueprint: MultiStepForm;\n}): \"beginning\" | \"middle\" | \"end\" {\n  // What stage of the form are we in\n  // Beginning - Middle - End\n  const numberOfAvailableSteps = formBlueprint.length;\n  let formStage: \"beginning\" | \"middle\" | \"end\" =\n    context.currentStep === 0\n      ? \"beginning\"\n      : Number(context.currentStep) + 1 === numberOfAvailableSteps\n      ? \"end\"\n      : \"middle\";\n\n  return formStage;\n}\n\nexport function toBinary(string: string) {\n  const codeUnits = new Uint16Array(string.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = string.charCodeAt(i);\n  }\n  const charCodes = new Uint8Array(codeUnits.buffer);\n  let result = \"\";\n  for (let i = 0; i < charCodes.byteLength; i++) {\n    result += String.fromCharCode(charCodes[i]);\n  }\n  return result;\n}\n\nexport function fromBinary(binary: string) {\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  const charCodes = new Uint16Array(bytes.buffer);\n  let result = \"\";\n  for (let i = 0; i < charCodes.length; i++) {\n    result += String.fromCharCode(charCodes[i]);\n  }\n  return result;\n}\n\nexport function convertSingleQuotes(string: string) {\n  let stringLength = string.length;\n  let result = \"\";\n\n  for (let i = 0; i < stringLength; i++) {\n    // look for single quotes\n    let stringChar = string.charCodeAt(i);\n\n    // console.log({ stringChar });\n\n    if (stringChar === 8216 || stringChar === 8217) {\n      // console.log(\"We've got a runner\");\n\n      result += \"'\";\n    } else {\n      result += string[i];\n    }\n  }\n\n  // console.log({ result });\n\n  return result;\n}\n", "import {\n  Cookie,\n  createCookieSessionStorage,\n  createSessionStorage,\n} from \"@remix-run/node\";\nimport { prisma } from \"~/db.server\";\n\n// import {\n//   getSession,\n//   commitSession,\n//   destroySession,\n// } from \"./redis-session.server\";\n\n// function createDatabaseSessionStorage({ cookie }: { cookie: Cookie }) {\n//   return createSessionStorage({\n//     cookie,\n//     async createData(data, expires) {\n//       const { id } = await prisma.session.create({\n//         data: {\n//           ...data,\n//         },\n//       });\n//       return id;\n//     },\n//     async readData(id) {\n//       return (\n//         (await prisma.session.findFirst({\n//           where: {\n//             id,\n//           },\n//         })) || null\n//       );\n//     },\n//     async updateData(id, data, expires) {\n//       await prisma.session.update({\n//         where: {\n//           id,\n//         },\n//         data: {\n//           ...data,\n//         },\n//       });\n//     },\n//     async deleteData(id) {\n//       await prisma.session.delete({\n//         where: {\n//           id,\n//         },\n//       });\n//     },\n//   });\n// }\n\n// const { getSession, commitSession, destroySession } =\n//   createDatabaseSessionStorage({\n//     cookie: {\n//       name: \"__form_cookie\",\n//       // @ts-ignore\n//       secure: process.env.NODE_ENV === \"production\", // enable this in prod only,\n//       httpOnly: true,\n//       path: \"/\",\n//       sameSite: \"lax\",\n//       secrets: [process.env.FORM_SESSION_SECRET ?? \"S3cr3tS3cr3ts\"],\n//     },\n//   });\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst { getSession, commitSession, destroySession } =\n  createCookieSessionStorage({\n    cookie: {\n      name: \"__new_call\",\n      maxAge: 30,\n      secure: process.env.NODE_ENV === \"production\", // enable this in prod only,\n      httpOnly: true,\n      path: \"/\",\n      sameSite: \"lax\",\n      secrets: [process.env.FORM_SESSION_SECRET ?? \"S3cr3tS3cr3ts\"],\n    },\n  });\n\nexport { getSession, commitSession, destroySession };\n", "import {\n  checkContextForErrors,\n  handleFormData,\n  handleListItemFormStructureOp,\n  honeypotFieldHasValue,\n} from \"./action-utils\";\nimport type { FormFieldInput, MultiStepForm } from \"./types\";\nimport {\n  commitSession,\n  getSession,\n  destroySession,\n} from \"~/services/electric-ladyland/session.server\";\nimport { redirect } from \"@remix-run/node\";\nimport {\n  addFormValuesToContext,\n  validateFormFieldValue,\n} from \"~/services/electric-ladyland/action-utils\";\nimport { getFormStage } from \"./shared\";\n\nasync function formActionFunction({\n  formType,\n  request,\n  formBlueprint,\n  handleDataFn,\n  successRedirectPath,\n}:\n  | {\n      formType: \"basic\";\n      request: Request;\n      formBlueprint: FormFieldInput[];\n      handleDataFn: any;\n      successRedirectPath: string;\n    }\n  | {\n      formType: \"multipart\";\n      request: Request;\n      formBlueprint: MultiStepForm;\n      handleDataFn: any;\n      successRedirectPath: string;\n    }): Promise<any> {\n  // Get the current session\n  const session = await getSession(request.headers.get(\"Cookie\"));\n\n  console.log({ session });\n\n  let { pathname } = new URL(request.url);\n\n  let context: any = session.get(\"context\") ?? {};\n\n  console.log({ context });\n\n  // If there is no context, the session most likely timed out\n  // We only really care about the context if it is a multipart form\n  if (formType === \"multipart\" && Object.keys(context).length < 1) {\n    let { pathname } = new URL(request.url);\n    // console.log({ pathname });\n\n    console.log(\"No context found in session, redirecting to start\");\n    return redirect(pathname, {\n      headers: {\n        \"Set-Cookie\": await destroySession(session),\n      },\n    });\n  }\n\n  const body = await request.formData();\n\n  // Handle bots by checking for honeypot field\n  let honeypotFieldHit = honeypotFieldHasValue({ body });\n\n  if (honeypotFieldHit) {\n    return redirect(\"/\");\n  }\n\n  const operationType = body.get(\"operation-type\");\n\n  // *** ALERT ***\n  // operationType only exists for list item form structure\n  // Handle accordingly\n  if (operationType) {\n    return await handleListItemFormStructureOp({\n      operationType,\n      formBlueprint,\n      context,\n      session,\n      pathname,\n      body,\n    });\n  }\n\n  let submitType: \"back\" | \"next\" | \"submit\" | string =\n    body.get(\"submit-type\")?.toString() ?? \"\";\n\n  // console.log({ submitType });\n\n  // Multipart - back button\n  if (formType === \"multipart\") {\n    if (submitType === \"back\") {\n      context.currentStep -= 1;\n\n      session.set(\"context\", context);\n\n      return redirect(pathname, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    }\n  }\n\n  // Add the form values to context\n  await addFormValuesToContext({\n    formType,\n    formBlueprint,\n    body,\n    context,\n  });\n\n  // Validate the form inputs using the validation\n  // methods from the form structure\n  if (formType === \"basic\") {\n    console.log(\"basically\");\n\n    formBlueprint.forEach((formField) => {\n      validateFormFieldValue({ context, formField });\n    });\n  }\n\n  if (formType === \"multipart\") {\n    const currentFormStep = context.currentStep;\n\n    for (const formField of formBlueprint[currentFormStep]?.fields) {\n      // console.log({ formField });\n\n      validateFormFieldValue({ context, formField });\n    }\n  }\n\n  let sessionData: any = {};\n\n  for (const contextItem in context) {\n    // console.log({ contextItem: context[contextItem] });\n\n    sessionData[contextItem] = context[contextItem].value;\n  }\n\n  // console.log({ sessionData });\n\n  session.set(\"context\", context);\n\n  // Check for errors in context\n  // In basic, we want to check all of the context entries\n  // In multipart, we only want to check the context items\n  // for the current step\n  // @ts-expect-error function overload not externally visible\n  let errorsInContext = checkContextForErrors({\n    context,\n    formType,\n    formBlueprint,\n  });\n\n  // console.log({ errorsInContext, context });\n\n  if (!errorsInContext) {\n    // If there are no errors in the context we have two routes\n    // to take\n\n    // Basic Form\n    // Multipart Form\n\n    // BASIC FORM\n    if (formType === \"basic\") {\n      return handleFormData({\n        request,\n        handleDataFn,\n        commitSession,\n        context,\n        successRedirectPath,\n        session,\n      });\n    }\n\n    // MULTIPART FORM\n\n    // Get the current form stage\n    // This will determine a couple things\n    // * What buttons we need to render on the form\n    // (Next, Back, Submit)\n    // * If we are at the end, we want to handle the data,\n    // otherwise we want to show the next step of the form\n    const formStage = getFormStage({ formBlueprint, context });\n    context.formStage = formStage;\n\n    // Handle data\n    if (formStage === \"end\" && submitType === \"submit\") {\n      // console.log(\"hey guys\");\n\n      return handleFormData({\n        handleDataFn,\n        commitSession,\n        context,\n        successRedirectPath,\n        session,\n        request,\n      });\n    } else {\n      console.log(\"pow\");\n\n      // console.log(\"whats up dawg?\");\n      // Still at the beginning or middle of the form\n      // All the inputs were correct, we want to go to\n      // the next stage of the form\n      context.currentStep += 1;\n      console.log({ currentStep: context.currentStep });\n\n      session.set(\"context\", context);\n\n      return redirect(pathname, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    }\n  }\n\n  console.log(\"you're here?\");\n\n  return redirect(pathname, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n\nexport { formActionFunction };\n", "// Create a component that renders a hidden input\nexport function HiddenField({\n  fieldContext,\n  fieldBlueprint,\n}: {\n  fieldContext: {\n    value?: string;\n  };\n  fieldBlueprint: {\n    initialValue?: string;\n    name: string;\n  };\n}) {\n  let initialValue = fieldBlueprint.initialValue ?? \"\";\n  let value = fieldContext?.value ?? initialValue;\n  return <input type=\"hidden\" name={fieldBlueprint.name} value={value} />;\n}\n", "import type { ReactNode } from \"react\";\nimport type {\n  CheckboxGroupBlueprint,\n  RadioFieldBlueprint,\n  StatefulRadioFieldBlueprint,\n  TextFieldBlueprint,\n} from \"../../types\";\n\nexport function FieldLabel({\n  className,\n  children,\n}: {\n  className?: string;\n  children: ReactNode;\n}) {\n  return (\n    <>\n      <span\n        className={`el-form-field-label${className ? \" \" + className : \"\"}`}\n      >\n        {children}\n      </span>\n    </>\n  );\n}\n\nexport function FieldDescription({ children }: { children: ReactNode }) {\n  if (children) {\n    return <p className=\"el-form-field-description\">{children}</p>;\n  }\n\n  return null;\n}\n\nexport function displayFieldErrors({\n  fieldErrors,\n  fieldVisited,\n}: {\n  fieldErrors: string[];\n  fieldVisited: boolean;\n}) {\n  return (\n    <>\n      {fieldErrors.length >= 1 && fieldVisited\n        ? fieldErrors.map((fieldError) => {\n            console.log({ fieldError });\n\n            if (fieldErrors.length === 1) {\n              return (\n                <div className=\"el-field-error-text\" key={fieldError}>\n                  {fieldError}\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"el-field-error-text\" key={fieldError}>\n                  - {fieldError}\n                </div>\n              );\n            }\n          })\n        : null}\n    </>\n  );\n}\n\nexport function displayFieldLabelDescriptionError({\n  fieldBlueprint,\n  fieldErrors,\n  fieldVisited,\n}: {\n  fieldBlueprint:\n    | TextFieldBlueprint\n    | RadioFieldBlueprint\n    | StatefulRadioFieldBlueprint\n    | CheckboxGroupBlueprint;\n  fieldErrors?: string[];\n  fieldVisited?: boolean;\n}) {\n  // fieldErrors = [\"Something Very Bad Happened\", \"Another Bad Thing\"];\n  // fieldVisited = true;\n  return (\n    <>\n      <label htmlFor={fieldBlueprint.name} key={fieldBlueprint.name}>\n        <FieldLabel>{fieldBlueprint.label}</FieldLabel>\n      </label>\n\n      <FieldDescription>{fieldBlueprint.description}</FieldDescription>\n\n      {fieldErrors && fieldVisited\n        ? displayFieldErrors({ fieldErrors, fieldVisited })\n        : null}\n    </>\n  );\n}\n\nexport function RadioOrCheckboxWrapper({\n  className,\n  children,\n}: {\n  className?: string;\n  children: ReactNode;\n}) {\n  // console.log({ className });\n\n  return (\n    <>\n      <div\n        className={`el-radio-or-checkbox-wrapper${\n          className ? \" \" + className : \"\"\n        }`}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport function RadioOrCheckboxLabel({\n  className,\n  children,\n  htmlFor,\n}: {\n  className?: string;\n  children: ReactNode;\n  htmlFor: string;\n}) {\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={`el-radio-or-checkbox-label${\n        className ? \" \" + className : \"\"\n      }`}\n    >\n      {children}\n    </label>\n  );\n}\n", "import type { FormEvent } from \"react\";\nimport { useState } from \"react\";\nimport { convertSingleQuotes } from \"../../shared\";\n\nexport function createFieldLabel(fieldName: string) {\n  let words = fieldName.split(\"-\");\n\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i][0].toUpperCase() + words[i].slice(1);\n  }\n\n  return words.join(\" \");\n}\n\nexport function onChange({\n  e,\n  fieldValidation,\n  setFieldErrors,\n  fieldErrors,\n}: {\n  e: FormEvent<HTMLInputElement> | FormEvent<HTMLTextAreaElement>;\n  setFieldErrors: any;\n  fieldErrors: string[];\n  fieldValidation: { patterns: string[]; messages: string[] };\n}) {\n  fieldValidation.patterns.forEach(async (pattern, index) => {\n    let regexTestPattern = new RegExp(pattern, \"gim\");\n\n    let value = convertSingleQuotes(e?.currentTarget?.value);\n\n    let fieldIsValid = regexTestPattern.test(value);\n\n    if (fieldIsValid) {\n      setFieldErrors([]);\n    } else if (!fieldErrors.includes(fieldValidation.messages[index])) {\n      // console.log(\"not valid\");\n\n      // Only display the error message once\n      setFieldErrors([...fieldErrors, fieldValidation.messages[index]]);\n    }\n  });\n}\n\nexport function useFormField({\n  fieldBlueprint,\n  fieldContext,\n}: {\n  fieldBlueprint: {\n    name: string;\n    type: string;\n    initialValue?: string;\n  };\n  fieldContext: {\n    value?: string;\n    errors: string[];\n  };\n}) {\n  // Determine if the field has errors or has been visited\n  let errors: string[] = [];\n  let visited = false;\n\n  if (\n    fieldBlueprint.type === \"email\" ||\n    fieldBlueprint.type === \"password\" ||\n    fieldBlueprint.type === \"text\" ||\n    fieldBlueprint.type === \"textarea\"\n  ) {\n    if (fieldContext?.errors) {\n      errors = fieldContext?.errors;\n\n      if (fieldContext?.errors.length >= 1) visited = true;\n    }\n  }\n\n  let [fieldErrors, setFieldErrors] = useState(errors);\n  let [fieldVisited, setFieldVisited] = useState(visited);\n\n  // Check to see whether a value for the field exists in the context\n  // If it does, set the value to the context value\n  // If it doesn't, set the value to the initial value\n  let initialValue = fieldBlueprint.initialValue ?? \"\";\n  let defaultValue = fieldContext?.value ?? initialValue;\n\n  return {\n    fieldErrors,\n    fieldVisited,\n    setFieldErrors,\n    setFieldVisited,\n    defaultValue,\n  };\n}\n", "import { displayFieldLabelDescriptionError } from \"./shared/display\";\nimport type { TextFieldBlueprint } from \"../types\";\nimport { onChange, useFormField } from \"./shared/logic\";\n\nexport function TextInput({\n  fieldBlueprint,\n  fieldContext,\n  className,\n}: {\n  fieldContext: { value?: string; errors: string[] };\n  fieldBlueprint: TextFieldBlueprint;\n  className?: string;\n}) {\n  let {\n    defaultValue,\n    fieldErrors,\n    setFieldErrors,\n    fieldVisited,\n    setFieldVisited,\n  } = useFormField({ fieldBlueprint, fieldContext });\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n        fieldErrors,\n        fieldVisited,\n      })}\n      {fieldBlueprint.type === \"text\" ||\n      fieldBlueprint.type === \"password\" ||\n      fieldBlueprint.type === \"email\" ? (\n        <input\n          data-test={fieldBlueprint.name}\n          name={fieldBlueprint.name}\n          id={fieldBlueprint.name}\n          className={`el-text-input${className ? \" \" + className : \"\"}`}\n          required={fieldBlueprint.required}\n          defaultValue={defaultValue}\n          placeholder={fieldBlueprint.placeholder}\n          onBlur={() => setFieldVisited(true)}\n          onChange={(event) => {\n            onChange({\n              e: event,\n              setFieldErrors,\n              fieldErrors,\n              fieldValidation: fieldBlueprint.validation,\n            });\n          }}\n          pattern={fieldBlueprint.validation.formInputPattern}\n          title={fieldBlueprint.validation.formInputMessage}\n          type={fieldBlueprint.type}\n          autoCorrect=\"false\"\n          autoComplete=\"false\"\n        />\n      ) : fieldBlueprint.type === \"textarea\" ? (\n        <textarea\n          name={fieldBlueprint.name}\n          id={fieldBlueprint.name}\n          data-test={fieldBlueprint.name}\n          className=\"w-full font-medium mm:text-lg p-2 px-3 bg-white rounded\"\n          required={fieldBlueprint.required}\n          rows={5}\n          defaultValue={defaultValue}\n          placeholder={fieldBlueprint.placeholder}\n          onBlur={() => setFieldVisited(true)}\n          onChange={(event) => {\n            onChange({\n              e: event,\n              setFieldErrors,\n              fieldErrors,\n              fieldValidation: fieldBlueprint.validation,\n            });\n          }}\n        />\n      ) : null}\n    </>\n  );\n}\n", "import type { RadioFieldBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\nimport { createFieldLabel } from \"./shared/logic\";\n\nexport function Radio({\n  fieldBlueprint,\n  fieldContext,\n}: {\n  fieldContext: { value?: string; errors: string[] };\n  fieldBlueprint: RadioFieldBlueprint;\n  className?: string;\n}) {\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n\n      {fieldBlueprint.options.map((radioValue) => {\n        console.log({ radioValue });\n\n        let defaultRadioValue = fieldBlueprint.initialValue;\n\n        if (fieldContext?.value) {\n          defaultRadioValue = fieldContext.value;\n        }\n\n        const label = createFieldLabel(radioValue);\n        return (\n          <RadioOrCheckboxWrapper key={`${fieldBlueprint.name}-${radioValue}`}>\n            <input\n              data-test={`${fieldBlueprint.name}-${radioValue}`}\n              key={radioValue}\n              type=\"radio\"\n              id={`${fieldBlueprint.name}-${radioValue}`}\n              name={fieldBlueprint.name}\n              value={radioValue}\n              autoComplete=\"off\"\n              defaultChecked={radioValue === defaultRadioValue}\n            />\n            <RadioOrCheckboxLabel\n              className=\"ml-2\n              \"\n              htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n            >\n              {label}\n            </RadioOrCheckboxLabel>\n          </RadioOrCheckboxWrapper>\n        );\n      })}\n    </>\n  );\n}\n", "import type { CheckboxGroupBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\n\n// Because we are dealing with checkboxes, we want all of the\n// context items.\n\n// To determine if a checkbox is checked, we need to look\n// at the context to see if the field exists there. If it does,\n// we know that the checkbox is checked.\nexport function CheckboxGroup({\n  fieldBlueprint,\n  context,\n}: {\n  context: any;\n  fieldBlueprint: CheckboxGroupBlueprint;\n  className?: string;\n}) {\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n\n      {fieldBlueprint.checkboxes.map((checkbox) => {\n        return (\n          <RadioOrCheckboxWrapper key={checkbox.name}>\n            <input\n              data-test={`${checkbox.name}-${checkbox.value}`}\n              key={checkbox.name}\n              type=\"checkbox\"\n              id={checkbox.name}\n              name={checkbox.name}\n              value={checkbox.value}\n              autoComplete=\"off\"\n              defaultChecked={context?.[checkbox.name]}\n            />\n            <RadioOrCheckboxLabel\n              className=\"ml-2\n              \"\n              htmlFor={checkbox.name}\n            >\n              {checkbox.label}\n            </RadioOrCheckboxLabel>\n          </RadioOrCheckboxWrapper>\n        );\n      })}\n    </>\n  );\n}\n", "import type { ExpandableListBlueprint } from \"../types\";\nimport { Form, useSubmit } from \"@remix-run/react\";\nimport { useState, useEffect } from \"react\";\n\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { FormField } from \"../form-field\";\n\nexport function ExpandableList({\n  fieldBlueprint,\n  fieldContext,\n}: {\n  fieldBlueprint: ExpandableListBlueprint;\n  fieldContext: {\n    value: string[];\n    errors: string[];\n  };\n}) {\n  const submit = useSubmit();\n  const [showDialog, setShowDialog] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(undefined);\n  const [selectedAction, setSelectedAction] = useState(\"\");\n  const [listItems, setListItems] = useState<any[] | []>([]);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  useEffect(() => {\n    console.log(\"context changed\");\n\n    setListItems(fieldContext?.value);\n    console.log({ listItems });\n  }, [fieldContext, listItems]);\n\n  let { listItemStructure } = fieldBlueprint;\n\n  let fieldsToShowInTable = {};\n  listItemStructure.forEach((field) => {\n    // @ts-expect-error lolz typescript\n    if (field.showOnMobileTable) {\n      // @ts-expect-error lolz typescript\n      fieldsToShowInTable[field.name] = field;\n    }\n  });\n\n  return (\n    <>\n      <button\n        className=\"add-item-button expand-click-target\"\n        onClick={(e) => {\n          e.preventDefault();\n          setSelectedIndex(undefined);\n          setSelectedAction(\"\");\n          open();\n        }}\n      >\n        <span className=\"add-item-icon\">\n          <FiPlusCircle />\n        </span>\n        {fieldBlueprint.addItemLabel}\n      </button>\n\n      <span className=\"block h-5 mm:h-6\"></span>\n\n      {listItems.length > 0 && (\n        <>\n          <div className=\"list-items-table-wrapper\">\n            <table>\n              <thead>\n                <tr className=\"lit-row\">\n                  {listItemStructure.map((nestedField) => {\n                    if (\n                      Object.keys(fieldsToShowInTable).includes(\n                        nestedField.name\n                      )\n                    ) {\n                      return (\n                        <th\n                          className=\"lit-cell\"\n                          data-flex={\n                            // @ts-expect-error lolz typescript\n                            nestedField.tableFlex\n                          }\n                          data-align-text={\n                            // @ts-expect-error lolz typescript\n                            nestedField.alignText\n                          }\n                          key={nestedField.name}\n                        >\n                          {\n                            // @ts-expect-error lolz typescript\n                            nestedField.label\n                          }\n                        </th>\n                      );\n                    } else {\n                      return null;\n                    }\n                  })}\n                  <th className=\"lit-cell\" data-flex={3}>\n                    &nbsp;\n                  </th>\n                  <th className=\"lit-cell\" data-flex={3}>\n                    &nbsp;\n                  </th>\n                </tr>\n              </thead>\n\n              {listItems.map((item: any, index: number) => {\n                // console.log({ item });\n                return (\n                  <tr className=\"lit-row\" key={index}>\n                    {Object.keys(fieldsToShowInTable).map(\n                      (fieldToShow, index) => {\n                        console.log({ index });\n\n                        let cellFlexValue;\n\n                        let alignTextValue;\n\n                        listItemStructure.forEach((itemStructure: any) => {\n                          if (itemStructure.name === fieldToShow) {\n                            cellFlexValue = itemStructure.tableFlex;\n                            alignTextValue = itemStructure.alignText;\n                          }\n                        });\n\n                        // flexValueArray.filter((item) => {\n                        //   if (item !== undefined && typeof item === \"number\") {\n                        //     return item;\n                        //   }\n                        // });\n\n                        console.log({ cellFlexValue });\n\n                        return (\n                          <th\n                            className=\"lit-cell\"\n                            data-flex={cellFlexValue}\n                            data-align-text={alignTextValue}\n                            key={`${item[fieldToShow]}-${index}`}\n                          >\n                            {item[fieldToShow]?.value}\n                          </th>\n                        );\n                      }\n                    )}\n                    <th\n                      className=\"lit-cell\"\n                      data-align-text=\"right\"\n                      data-flex={3}\n                    >\n                      <button\n                        className=\"edit-item-button expand-click-target\"\n                        data-test={`edit-${index}`}\n                        onClick={(e) => {\n                          e.preventDefault();\n                          // @ts-expect-error lolz typescript\n                          setSelectedIndex(index);\n                          setSelectedAction(\"edit-item\");\n\n                          open();\n                        }}\n                      >\n                        Edit\n                      </button>\n                    </th>\n                    <th\n                      className=\"lit-cell\"\n                      data-align-text=\"right\"\n                      data-flex={3}\n                    >\n                      <button\n                        className=\"delete-item-button expand-click-target\"\n                        data-test={`delete-${index}`}\n                        onClick={(e) => {\n                          e.preventDefault();\n                          // @ts-expect-error lolz typescript\n                          setSelectedIndex(index);\n                          setSelectedAction(\"delete-item\");\n\n                          open();\n                        }}\n                      >\n                        Delete\n                      </button>\n                    </th>\n                  </tr>\n                );\n              })}\n            </table>\n          </div>\n        </>\n      )}\n      <DialogOverlay isOpen={showDialog} onDismiss={close}>\n        <DialogContent aria-label={fieldBlueprint.addOrEditItemModalLabel}>\n          {selectedAction === \"delete-item\" ? (\n            <>\n              <div className=\"font-bold text-2xl text-danger-7\">\n                Delete Item\n              </div>\n              <span className=\"block h-3\"></span>\n              <p>\n                Are you sure you want to delete item{\" \"}\n                {listItems.map((item, index) => {\n                  if (index === selectedIndex) {\n                    console.log({ item: item[Object.keys(item)[0]] });\n                    return listItems[selectedIndex][\n                      Object.keys(listItems[selectedIndex])[0]\n                    ]?.value;\n                  } else {\n                    return null;\n                  }\n                })}\n              </p>\n              <span className=\"block h-6\"></span>\n              <div className=\"flex items-center\">\n                <button\n                  className=\"bg-primary-05 text-primary-7 font-bold py-2 px-4 rounded-md mr-8 border-none expand-click-target\"\n                  data-test=\"cancel\"\n                  onClick={() => {\n                    close();\n                  }}\n                >\n                  Cancel\n                </button>\n                <Form\n                  method=\"post\"\n                  onSubmitCapture={(event) => {\n                    submit(event.currentTarget);\n                    close();\n                  }}\n                >\n                  <input\n                    type=\"hidden\"\n                    name=\"operation-type\"\n                    value=\"delete-list-item\"\n                  />\n                  <input\n                    type=\"hidden\"\n                    name=\"index-to-delete\"\n                    value={selectedIndex}\n                  />\n                  <button\n                    className=\"bg-danger-05 text-danger-9 font-bold outline-none py-2 px-4 rounded-md\"\n                    data-test=\"confirm-delete\"\n                    type=\"submit\"\n                  >\n                    Confirm Delete\n                  </button>\n                </Form>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"font-bold text-neutral-9 text-2xl\">\n                {typeof selectedIndex === \"number\"\n                  ? fieldBlueprint.editItemLabel\n                  : fieldBlueprint.addItemLabel}\n              </div>\n              <span className=\"block h-8\"></span>\n              <Form\n                reloadDocument\n                method=\"post\"\n                onSubmitCapture={(event) => {\n                  submit(event.currentTarget);\n                  close();\n                }}\n              >\n                {selectedAction === \"edit-item\" ? (\n                  <>\n                    <input\n                      type=\"hidden\"\n                      name=\"operation-type\"\n                      value=\"edit-list-item\"\n                    />\n                    <input\n                      type=\"hidden\"\n                      name=\"index-to-change\"\n                      value={selectedIndex}\n                    />\n                  </>\n                ) : (\n                  <input\n                    type=\"hidden\"\n                    name=\"operation-type\"\n                    value=\"add-item-to-list\"\n                  />\n                )}\n                {listItemStructure.map((nestedField) => {\n                  return (\n                    <FormField\n                      context={\n                        typeof selectedIndex === \"number\"\n                          ? fieldContext?.value[selectedIndex]\n                          : fieldContext\n                      }\n                      key={nestedField.name}\n                      field={nestedField}\n                    />\n                  );\n                })}\n                <span className=\"block h-4\"></span>\n                <button\n                  className=\"text-success-7 font-bold rounded-md border-none text-lg px-4 py-2 -ml-1 bg-success-05\"\n                  type=\"submit\"\n                >\n                  Confirm\n                </button>\n              </Form>\n            </>\n          )}\n        </DialogContent>\n      </DialogOverlay>\n    </>\n  );\n}\n", "import { useState } from \"react\";\nimport { FormField } from \"../form-field\";\nimport type { StatefulRadioFieldBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\nimport { createFieldLabel } from \"./shared/logic\";\n\nexport function StatefulRadio({\n  fieldBlueprint,\n  context,\n}: {\n  fieldBlueprint: StatefulRadioFieldBlueprint;\n  context: any;\n}) {\n  let selectedIndex = 0;\n  fieldBlueprint.options.forEach((option, index) => {\n    let defaultValue =\n      context[fieldBlueprint.name]?.value ?? fieldBlueprint.initialValue;\n    if (defaultValue === option) {\n      selectedIndex = index;\n    }\n  });\n\n  console.log({ context });\n\n  const [selectedValue, setSelectedValue] = useState(selectedIndex);\n\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n      <div className=\"el-field-item\">\n        {fieldBlueprint.options.map((radioValue, index) => {\n          const label = createFieldLabel(radioValue);\n\n          if (index === selectedValue) {\n            return (\n              <RadioOrCheckboxWrapper key={radioValue}>\n                <input\n                  data-test={`${fieldBlueprint.name}-${radioValue}`}\n                  type=\"radio\"\n                  id={`${fieldBlueprint.name}-${radioValue}`}\n                  name={fieldBlueprint.name}\n                  value={radioValue}\n                  onChange={() => {\n                    setSelectedValue(index);\n                  }}\n                  checked={true}\n                  autoComplete=\"off\"\n                />\n                <RadioOrCheckboxLabel\n                  htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n                >\n                  {label}\n                </RadioOrCheckboxLabel>\n              </RadioOrCheckboxWrapper>\n            );\n          } else {\n            return (\n              <RadioOrCheckboxWrapper key={radioValue}>\n                <input\n                  data-test={`${fieldBlueprint.name}-${radioValue}`}\n                  type=\"radio\"\n                  id={`${fieldBlueprint.name}-${radioValue}`}\n                  name={fieldBlueprint.name}\n                  value={radioValue}\n                  onChange={() => {\n                    setSelectedValue(index);\n                  }}\n                  autoComplete=\"off\"\n                />\n                <RadioOrCheckboxLabel\n                  htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n                >\n                  {label}\n                </RadioOrCheckboxLabel>\n              </RadioOrCheckboxWrapper>\n            );\n          }\n        })}\n      </div>\n      {fieldBlueprint.dependentChildren[selectedValue].map((nestedField) => {\n        if (nestedField) {\n          return (\n            <FormField\n              context={context}\n              key={nestedField.name}\n              field={nestedField}\n            />\n          );\n        }\n        return null;\n      })}\n    </>\n  );\n}\n", "import type { FormFieldInput } from \"~/services/electric-ladyland/types\";\nimport styles from \"./styles.css\";\nimport { HiddenField } from \"./components/hidden\";\nimport { TextInput } from \"./components/text-input\";\nimport { Radio } from \"./components/radio\";\nimport { CheckboxGroup } from \"./components/checkbox-group\";\nimport { ExpandableList } from \"./components/expandable-list\";\nimport { StatefulRadio } from \"./components/stateful-radio\";\n\nFormField.styles = styles;\n\nexport function FormField({\n  field,\n  context,\n}: {\n  field: FormFieldInput;\n  context: any;\n}) {\n  if (field.type === \"hidden\") {\n    return (\n      <HiddenField fieldContext={context[field.name]} fieldBlueprint={field} />\n    );\n  }\n\n  if (\n    field.type === \"text\" ||\n    field.type === \"textarea\" ||\n    field.type === \"password\" ||\n    field.type === \"email\"\n  ) {\n    return (\n      <div className=\"el-field-item\">\n        <TextInput fieldBlueprint={field} fieldContext={context[field.name]} />\n      </div>\n    );\n  }\n\n  if (field.type === \"radio\") {\n    return (\n      <div className=\"el-field-item\">\n        <Radio fieldBlueprint={field} fieldContext={context[field.name]} />\n      </div>\n    );\n  }\n\n  if (field.type === \"checkbox-group\") {\n    return (\n      <div className=\"el-field-item\">\n        <CheckboxGroup fieldBlueprint={field} context={context} />\n      </div>\n    );\n  }\n\n  if (field.type === \"expandable-list\") {\n    return (\n      <div className=\"el-field-item\">\n        <ExpandableList\n          fieldBlueprint={field}\n          fieldContext={context[field.name]}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === \"stateful-radio\") {\n    return (\n      <div className=\"el-field-item\">\n        <StatefulRadio fieldBlueprint={field} context={context} />\n      </div>\n    );\n  }\n  return null;\n}\n", "import { ReactNode } from \"react\";\nimport { FormFieldInput } from \"./types\";\nimport { Form } from \"@remix-run/react\";\nimport { FormField } from \"./form-field\";\nimport { Button } from \"~/components/interactive\";\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\nimport { IoCloseSharp } from \"react-icons/io5\";\n\nexport function MultipartForm({\n  context,\n  formStructure,\n  action,\n  reloadDocument = false,\n}: {\n  context: any;\n  formStructure: FormFieldInput[];\n  action?: string;\n  reloadDocument?: boolean;\n}) {\n  console.log({ formStructure });\n\n  return (\n    <div className=\"form-container relative\">\n      <FormWrapper reloadDocument={reloadDocument} action={action}>\n        <HoneypotField />\n        {formStructure.map((field: FormFieldInput) => {\n          return <FormField field={field} context={context} key={field.name} />;\n        })}\n        {context.dataHandlerErrorMessage && context.formStage === \"end\" ? (\n          <>\n            <div className=\"font-display text-lg font-semibold text-danger-5\">\n              {context.dataHandlerErrorMessage}\n            </div>\n            <span className=\"block h-6\"></span>\n          </>\n        ) : null}\n        <div className=\"forward-button-wrapper mt-10 flex w-full\">\n          {(context.formStage === \"beginning\" ||\n            context.formStage === \"middle\") && (\n            <FormButton\n              dataTest=\"next\"\n              className=\"ml-auto bg-primary-5 pr-4\"\n              name=\"submit-type\"\n              type=\"submit\"\n              value=\"next\"\n            >\n              {context.nextButtonText}\n              <span className=\"ml-2 block mm:text-lg\">\n                <FaChevronRight aria-hidden=\"true\" />\n              </span>\n            </FormButton>\n          )}\n          {context.formStage === \"end\" && (\n            <FormButton\n              dataTest=\"submit\"\n              className=\" forward-button-wrapper ml-auto bg-primary-5 pr-4\"\n              name=\"submit-type\"\n              type=\"submit\"\n              value=\"submit\"\n            >\n              Submit\n              <span className=\" ml-2 block mm:text-lg\">\n                <FaChevronRight aria-hidden=\"true\" />\n              </span>\n            </FormButton>\n          )}\n        </div>\n      </FormWrapper>\n      {(context.formStage === \"middle\" || context.formStage === \"end\") && (\n        <Form method=\"post\">\n          <FormButton\n            dataTest=\"back\"\n            className=\"absolute-button bottom-0 bg-neutral-4 pl-4\"\n            name=\"submit-type\"\n            type=\"submit\"\n            value=\"back\"\n          >\n            <span className=\"mr-2 block mm:text-lg\">\n              <FaChevronLeft aria-hidden=\"true\" />\n            </span>\n            {context.backButtonText}\n          </FormButton>\n        </Form>\n      )}\n    </div>\n  );\n}\n\nexport function BasicForm({\n  context,\n  formStructure,\n  action,\n  submitText,\n  reloadDocument = false,\n}: {\n  context: any;\n  formStructure: FormFieldInput[];\n  action?: string;\n  submitText?: string;\n  reloadDocument?: boolean;\n}) {\n  return (\n    <FormWrapper reloadDocument={reloadDocument} action={action}>\n      <HoneypotField />\n      {formStructure.map((field: FormFieldInput) => {\n        return <FormField field={field} context={context} key={field.name} />;\n      })}\n      {context.dataHandlerErrorMessage && (\n        <>\n          <div className=\"font-display text-lg font-semibold text-danger-5\">\n            {context.dataHandlerErrorMessage}\n          </div>\n          <span className=\"block h-6\"></span>\n        </>\n      )}\n      <span className=\"block h-0.5\"></span>\n      {submitText ? (\n        <SubmitButton>{submitText}</SubmitButton>\n      ) : (\n        <SubmitButton>Submit</SubmitButton>\n      )}\n    </FormWrapper>\n  );\n}\n\nfunction SubmitButton({ children }: { children: ReactNode }) {\n  return (\n    <Button\n      dataTest=\"submit\"\n      elevation=\"sm\"\n      variant=\"none\"\n      className=\"!mt-8 !w-fit bg-primary-5 text-white\"\n      type=\"submit\"\n    >\n      {children}\n    </Button>\n  );\n}\n\nfunction FormWrapper({\n  children,\n  action,\n  reloadDocument = false,\n}: {\n  children: ReactNode;\n  action?: string;\n  reloadDocument?: boolean;\n}) {\n  if (reloadDocument) {\n    return (\n      <Form\n        reloadDocument\n        action={action}\n        className=\"relative w-content\"\n        method=\"post\"\n      >\n        {children}\n      </Form>\n    );\n  }\n  return (\n    <Form action={action} className=\"relative w-content\" method=\"post\">\n      {children}\n    </Form>\n  );\n}\n\nfunction HoneypotField() {\n  return (\n    <>\n      <input\n        className=\"visually-hidden\"\n        type=\"text\"\n        name=\"given-name\"\n        id=\"given-name\"\n      />\n      <label className=\"visually-hidden\" htmlFor=\"given-name\">\n        Given Name\n      </label>\n    </>\n  );\n}\n\nfunction FormButton({\n  children,\n  name,\n  className,\n  value,\n  type = \"submit\",\n  dataTest,\n}: {\n  children: ReactNode;\n  name?: string;\n  className?: string;\n  value?: string;\n  type?: \"submit\";\n  dataTest?: string;\n}) {\n  return (\n    <button\n      data-test={dataTest}\n      className={`font-display flex items-center rounded-md border-0 py-3 px-5 font-semibold text-white mm:text-lg${\n        className ? \" \" + className : \"\"\n      }`}\n      name={name}\n      type={type}\n      value={value}\n    >\n      {children}\n    </button>\n  );\n}\n", "import type {\n  FormFieldInput,\n  MultiStepForm,\n} from \"~/services/electric-ladyland/types\";\nimport {\n  getSession,\n  commitSession,\n  destroySession,\n} from \"~/services/electric-ladyland/session.server\";\nimport { json } from \"@remix-run/node\";\nimport {\n  checkForRelevantContext,\n  getFormStage,\n  seedContextWithInitialValues,\n} from \"./logic\";\n\nexport async function formLoaderFunction({\n  basicOrMultipart,\n  request,\n  formBlueprint,\n}:\n  | {\n      basicOrMultipart: \"multipart\";\n      request: Request;\n      formBlueprint: MultiStepForm;\n    }\n  | {\n      basicOrMultipart: \"basic\";\n      request: Request;\n      formBlueprint: FormFieldInput[];\n    }): Promise<any> {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n\n  let context = session.get(\"context\");\n\n  // Check to see if the current context matches the current\n  // form structure. If it doesn't match, there is a good chance\n  // that there is no context or we are coming from a different form\n  if (basicOrMultipart === \"basic\") {\n    context = checkForRelevantContext({\n      formBlueprint,\n      basicOrMultipart,\n      context,\n    });\n  } else {\n    context = checkForRelevantContext({\n      formBlueprint,\n      basicOrMultipart,\n      context,\n    });\n  }\n\n  // If the context object doesn't have any length, we\n  // know that it is empty and we need to seed it\n  if (Object.keys(context).length < 1) {\n    if (basicOrMultipart === \"basic\") {\n      context = seedContextWithInitialValues({\n        formBlueprint,\n        basicOrMultipart,\n      });\n    } else {\n      context = seedContextWithInitialValues({\n        formBlueprint,\n        basicOrMultipart,\n      });\n    }\n  }\n\n  // Get the current step\n  context.currentStep = context?.currentStep ?? 0;\n\n  // We should never have a negative number\n  // for the current step\n  if (context.currentStep < 0) {\n    context.currentStep = 0;\n  }\n\n  if (basicOrMultipart === \"multipart\") {\n    let formStage = getFormStage({ context, formBlueprint });\n\n    // console.log({ formStage, context });\n\n    if (context.currentStep > 0 && Object.keys(context).length < 1) {\n      console.log(\"You shouldn't be here\");\n\n      return json(\n        {},\n        {\n          headers: {\n            \"Set-Cookie\": await destroySession(session),\n          },\n        }\n      );\n    }\n\n    context.formStage = formStage;\n    // @ts-ignore\n    context.nextButtonText = formBlueprint[context.currentStep]?.nextButtonText;\n    // @ts-ignore\n    context.backButtonText = formBlueprint[context.currentStep]?.backButtonText;\n  }\n\n  session.set(\"context\", context);\n\n  if (basicOrMultipart === \"multipart\") {\n    // console.log({ currentStep: context?.currentStep });\n\n    return {\n      context,\n      currentStepBlueprint: formBlueprint[context.currentStep]?.fields,\n      commitSession,\n      session,\n    };\n  } else {\n    return {\n      context,\n      currentStepBlueprint: formBlueprint,\n      commitSession,\n      session,\n    };\n  }\n}\n", "import type { FormFieldInput, MultiStepForm } from \"../../types\";\n\n// Check to see that the context applies to the current\n// form structure. If it doesn't, return false\n\n// Perform different validation based on the field type\n// Outliers:\n// - Stateful Radio\n// - Checkbox Group\n\n// Does the context apply to the current form structure?\n// Yes - return the current context\n// No - return an empty context object\nfunction checkForRelevantContext({\n  basicOrMultipart,\n  formBlueprint,\n  context,\n}:\n  | {\n      basicOrMultipart: \"basic\";\n      formBlueprint: FormFieldInput[];\n      context: any;\n    }\n  | {\n      basicOrMultipart: \"multipart\";\n      formBlueprint: MultiStepForm;\n      context: any;\n    }): any {\n  // No context exists\n  if (!context) {\n    return {};\n  }\n\n  let contextMismatch = false;\n\n  if (basicOrMultipart === \"multipart\") {\n    // Loop through the steps of the form structure and\n    // then loop through the fields of that step\n\n    // Each iteration of the loop will check the value of the\n    // contextMatches boolean. If contextMatches is false, we\n    // know we have a context mismatch and want to return an\n    // empty context object to re-initate the form\n\n    for (const step of formBlueprint) {\n      // @ts-ignore\n      for (const field of step?.fields) {\n        if (contextMismatch) {\n          console.log(\n            \"The context you passed in does not match the structure of the form. Setting context to an empty object so that we can start the form again\"\n          );\n\n          return {};\n        }\n\n        contextMismatch = checkContextForMismatch({ field, context });\n      }\n    }\n  }\n\n  if (basicOrMultipart === \"basic\") {\n    for (const field of formBlueprint) {\n      if (contextMismatch) {\n        return {};\n      }\n\n      contextMismatch = checkContextForMismatch({ field, context });\n    }\n  }\n\n  return context;\n}\n\nfunction checkContextForMismatch({\n  field,\n  context,\n}: {\n  field: FormFieldInput;\n  context: any;\n}) {\n  // Checkbox groups should be ignored, because their value\n  // may or may not exist. A selected checkbox will show up\n  // in a form post, an unselected checkbox will not\n  if (field.type === \"checkbox-group\") {\n    return false;\n  }\n\n  let contextFieldName = context[`${field.name}`];\n\n  if (\n    typeof contextFieldName?.value !== \"string\" &&\n    typeof contextFieldName?.value !== \"object\"\n  ) {\n    console.log(\"bad value: \", contextFieldName.value);\n\n    return true;\n  }\n\n  // Stateful radios are also special in that in addition to\n  // their value, they can have nested children\n  if (field.type === \"stateful-radio\") {\n    field.dependentChildren.forEach((fields) => {\n      fields.forEach((nestedField) => {\n        if (nestedField) {\n          checkContextForMismatch({ field: nestedField, context });\n        }\n      });\n    });\n  }\n\n  return false;\n}\n\nexport { checkForRelevantContext };\n", "import type { FormFieldInput, MultiStepForm } from \"../../types\";\n\nfunction seedContextWithInitialValues({\n  basicOrMultipart,\n  formBlueprint,\n}: {\n  basicOrMultipart: \"multipart\";\n  formBlueprint: MultiStepForm;\n}): any;\nfunction seedContextWithInitialValues({\n  basicOrMultipart,\n  formBlueprint,\n}: {\n  basicOrMultipart: \"basic\";\n  formBlueprint: FormFieldInput[];\n}): any;\nfunction seedContextWithInitialValues({\n  basicOrMultipart,\n  formBlueprint,\n}: {\n  basicOrMultipart: \"multipart\" | \"basic\";\n  formBlueprint: MultiStepForm | FormFieldInput[];\n}): any {\n  // Give the context object initial values\n  let context: any = {};\n\n  if (basicOrMultipart === \"multipart\") {\n    for (const step of formBlueprint) {\n      // console.log({ step });\n\n      // @ts-ignore\n      for (const field of step?.fields) {\n        // console.log({ field });\n\n        if (field) {\n          addFieldToContext({ field, context });\n        }\n      }\n    }\n\n    context.currentStep = 0;\n  }\n\n  if (basicOrMultipart === \"basic\") {\n    for (const nestedField of formBlueprint) {\n      if (typeof nestedField === \"object\") {\n        // @ts-ignore\n        addFieldToContext({ field: nestedField, context });\n      }\n    }\n  }\n\n  return context;\n}\n\nfunction addFieldToContext({\n  field,\n  context,\n}: {\n  field: FormFieldInput;\n  context: any;\n}) {\n  if (field.type !== \"checkbox-group\" && field.type !== \"expandable-list\") {\n    context[`${field.name}`] = {\n      value: field.initialValue || \"\",\n      errors: [],\n    };\n  } else if (field.type === \"checkbox-group\") {\n    field.checkboxes.forEach((checkbox) => {\n      if (checkbox.initialValue) {\n        context[`${field.name}`] = {\n          // @ts-expect-error silly typescript\n          value: field.initialValue || \"\",\n          errors: [],\n        };\n      }\n    });\n  } else if (field.type === \"expandable-list\") {\n    context[`${field.name}`] = {\n      value: field.initialValue || [],\n      errors: [],\n    };\n  }\n\n  // console.log(\"adding field context: \", context);\n\n  if (field.type === \"stateful-radio\") {\n    field.dependentChildren.forEach((fields) => {\n      fields.forEach((nestedField) => {\n        if (typeof nestedField !== \"undefined\") {\n          addFieldToContext({ field: nestedField, context });\n        }\n      });\n    });\n  }\n}\n\nexport { seedContextWithInitialValues };\n", "import type { MultiStepForm } from \"../../types\";\n\nfunction getFormStage({\n  context,\n  formBlueprint,\n}: {\n  context: any;\n  formBlueprint: MultiStepForm;\n}): \"beginning\" | \"middle\" | \"end\" {\n  // What stage of the form are we in\n  // Beginning - Middle - End\n  const numberOfAvailableSteps = formBlueprint.length;\n  let formStage: \"beginning\" | \"middle\" | \"end\" =\n    context.currentStep === 0\n      ? \"beginning\"\n      : Number(context.currentStep) + 1 === numberOfAvailableSteps\n      ? \"end\"\n      : \"middle\";\n\n  return formStage;\n}\n\nexport { getFormStage };\n", "import { Link } from \"@remix-run/react\";\n\nexport default function Index() {\n  return (\n    <div>\n      <h1>Remixed Form</h1>\n      <ul>\n        <li>\n          <Link to=\"/multi-item-form\">Multi-Item Form</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n", "export default {'version':'b198a369','entry':{'module':'/build/entry.client-Q7T3ZI3I.js','imports':['/build/_shared/chunk-2KUA5ERT.js','/build/_shared/chunk-KREO6WPC.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-MNYOBBNT.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-467OWTL2.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/multi-item-form':{'id':'routes/multi-item-form','parentId':'root','path':'multi-item-form','index':undefined,'caseSensitive':undefined,'module':'/build/routes/multi-item-form-LLQKUGHL.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-B198A369.js'};", "\nimport * as entryServer from \"/Users/markjensen/shared/electric-ladyland/app/entry.server.tsx\";\nimport * as route0 from \"/Users/markjensen/shared/electric-ladyland/app/root.tsx\";\nimport * as route1 from \"/Users/markjensen/shared/electric-ladyland/app/routes/multi-item-form.tsx\";\nimport * as route2 from \"/Users/markjensen/shared/electric-ladyland/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/multi-item-form\": {\n      id: \"routes/multi-item-form\",\n      parentId: \"root\",\n      path: \"multi-item-form\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": []
}
